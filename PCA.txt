import matplotlib.pyplot as plt
import numpy as np
import numpy.linalg as LA
from PIL import Image
from scipy import stats
from sklearn.metrics import roc_curve
from sklearn import metrics
from scipy.stats import shapiro
import scipy.stats as st


from google.colab import drive
drive.mount('/content/drive')


height =64
width = 64
N = 234 

data = np.zeros(height*width*N).reshape(N, height*width)
for i in range(N):
 data[i] = np.array(Image.open("./drive/My Drive/pupe/"+str(i)+".png")).flatten()



data_drawing = data.reshape(N, height, width)

#fig1 = plt.figure(figsize=(6,6))
#fig1.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05)

#for i in range(N):
  #ax1 = fig1.add_subplot(30, 8, i+1, xticks=[], yticks=[])
  #ax1.imshow(data_drawing[i], cmap=plt.cm.gray, interpolation='nearest')

#plt.show()
#show images

def eigsort(S):
  eigv_raw, u_raw = LA.eig(S)
  eigv_index = np.argsort(eigv_raw)[::-1]
  eigv = eigv_raw[eigv_index]
  u = u_raw[:, eigv_index]
  return [eigv, u]

m = np.mean(data, axis=0)
data_m = data - m[None, :]
S_inner = np.array((1/N) * ((data_m) @ (data_m).T))

[eig, u_inner] = eigsort(S_inner)

u = np.array((data_m.T @ u_inner)/np.sqrt(N * eig))

xlist = np.arange(eig.shape[0])
y = np.cumsum(eig)
ylist = y / y[-1]
#plt.plot(xlist, ylist)
#print(ylist)
index = np.where(ylist>=0.8)[0]
#print("0.8:::"+str(index[0] +1))

ylist[:index[0]+1]

principals =34
u_compressed = u[:, 0:principals]

#fig2 = plt.figure(figsize=(20,20))
#fig2.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05)
#show basis
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable, get_cmap
u_drawing = u_compressed.T.reshape(principals, height, width)
norm = Normalize(vmin=u_drawing.min(), vmax=u_drawing.max())
cmap = get_cmap('PuOr')
mappable = ScalarMappable(cmap=cmap, norm=norm)
mappable._A = []

#for i in range(principals):
 #ax2 = fig2.add_subplot(7,5, i+1, xticks=[], yticks=[])
 #ax2.imshow(u_drawing[i], cmap=cmap, interpolation='nearest')

#cbar = plt.colorbar(mappable)
#ticks = np.linspace(norm.vmin, norm.vmax, 5)
#cbar.set_ticks(ticks)
#show color bar



principals = 60
u_compressed = u[:, 0:principals]

pca_score = data_m @ u_compressed
data_reconstruct = data_m @ u_compressed @ u_compressed.T + m
u_drawing = u_compressed.T.reshape(principals, height, width)

data_reconstruct_drawing = data_reconstruct.reshape(N, height, width)

xlist_peso = pca_score[0:105, 2]
xlist_puri = pca_score[105:234,2]
#change here

ylist_peso = pca_score[0:105,22]
ylist_puri = pca_score[105:234, 22]
#change here

cm = plt.get_cmap("tab10")

plt.plot(xlist_peso, ylist_peso, 'o', color=cm(3),markersize=3)
plt.plot(xlist_puri, ylist_puri, 'o', color=cm(0),markersize=3)
plt.vlines(-207.6, -600, 600, colors='black', linestyle='dashed', linewidth=1)
plt.hlines(29.9, -1000, 1000, colors='black', linestyle='dashed', linewidth=1)
plt.title('PCA_score')
plt.xlabel('PC3')

plt.ylabel('PC23')
plt.show()

print(ylist_puri)

#aucâ†“
y_true=[0]*105
y_true1=[1]*129
y_true.extend(y_true1)


y_score=np.append(xlist_peso,xlist_puri)


fpr, tpr, thresholds = metrics.roc_curve(y_true, y_score)
auc = metrics.auc(fpr, tpr)
#plt.plot(fpr, tpr, label='ROC curve (area = %.2f)'%auc)
#plt.legend()
#plt.xlabel('FPR: False positive rate')
#plt.ylabel('TPR: True positive rate')
#plt.grid()
#plt.show()

#print(thresholds[np.argmax(tpr - fpr)])

stat,p1=shapiro(xlist_peso)
stat,p2=shapiro(xlist_puri)
#print(stat,p1)
#print(stat,p2)

_, p = st.levene(xlist_peso,xlist_puri,center='mean')

#print('levene')
#print(f'p = {p:.3f}')
stats.ttest_ind(xlist_peso, xlist_puri)
stats.mannwhitneyu(xlist_peso, xlist_puri, alternative='two-sided')

#PCscore

#principals = 64
#u_compressed = u[:, 0:principals]

#pca_score = data_m @ u_compressed
#data_reconstruct = data_m @ u_compressed @ u_compressed.T + m
#u_drawing = u_compressed.T.reshape(principals, height, width)

#data_reconstruct_drawing = data_reconstruct.reshape(N, height, width)

#korekana = 47
#xlist_peso = pca_score[0:105,korekana ]
#xlist_puri = pca_score[105:233,korekana]

#cm = plt.get_cmap("tab10")

# calc the histogram
#hist1, edges1 = np.histogram(xlist_peso, density=True)
#w1 = edges1[1] - edges1[0]
#hist1 = hist1 * w1

# calc the histogram
#hist2, edges2 = np.histogram(xlist_puri, density=True)
#w2 = edges2[1] - edges2[0]
#hist2 = hist2 * w2

# plot
#plt.bar(edges1[:-1], hist1, w1,alpha=0.3 ,color=cm(3))
# plot
#plt.bar(edges2[:-1], hist2, w2,alpha=0.3 ,color=cm(0))



#stats.ks_2samp(xlist_peso, xlist_puri)
#stats.mannwhitneyu(xlist_peso, xlist_puri, alternative='two-sided')

